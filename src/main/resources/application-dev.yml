server:
  port: 8080
  servlet:
    context-path: /sharding-jdbc-simple-demo

# 单库分表
#spring:
#  main:
#    # bean重复覆盖
#    allow-bean-definition-overriding: true
#  http:
#    encoding:
#      enabled: true
#      charset: utf-8
#      force: true
#  application:
#    name: sharding-jdbc-simple-demo
#  # 总结 1.首先配置数据源 2.配置数据节点 3.配置主键生成策略 4.配置分片策略
#  # sharding 数据源配置
#  shardingsphere:
#    datasource:
#      # 数据源别名
#      names: ds0
#      ds0:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.jdbc.Driver
#        url: jdbc:mysql://192.168.20.51:3306/sharding_order_0?useUnicode=true&useSSL=false
#        username: root
#        password: 123456
#    sharding:
#      tables:
#        t_order: # 这里表明和数据库对应起来的（这里的表名是逻辑表名）
#          actual-data-nodes: ds0.t_order_$->{1..2} # 指定t_order表的数据分布情况，配置数据节点
#          key-generator: # 指定t_order表的主键生成策略为snowflake
#            column: order_id
#            type: SNOWFLAKE
#          table-strategy: # 指定 t_order 表的分片策略，分片策略包括分片键和分片算法
#            inline:
#              sharding-column: order_id
#              algorithm-expression: t_order_$->{order_id % 2 + 1}
#    props: # 打开sql输出日志
#      sql:
#        show: true

sharding:
  classpath-dir: sharding-config
  config-file: sharding-ds0,sharding-ds1
# 垂直分库
spring:
  profiles:
    # 指定其他文件对应application-ds0.yml和application-ds1.yml
    include: ds1
  main:
    # bean重复覆盖
    allow-bean-definition-overriding: true
  http:
    encoding:
      enabled: true
      charset: utf-8
      force: true
  application:
    name: sharding-jdbc-simple-demo
  # 总结 1.首先配置数据源 2.配置数据节点 3.配置主键生成策略 4.配置分片策略
  # sharding 数据源配置
  shardingsphere:
    datasource:
      # 数据源别名
      names: ds0,ds1
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.20.51:3306/sharding_order_0?useUnicode=true&useSSL=false
        username: root
        password: 123456
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.20.51:3306/sharding_shop_1?useUnicode=true&useSSL=false
        username: root
        password: 123456
        #这里配置拆分到application-ds0.yml和application-ds1.yml中
#    sharding:
#      tables:
#        # t_order 表进行了水平分表
#        t_order: # 这里表明和数据库对应起来的（这里的表名是逻辑表名）
#          actual-data-nodes: ds0.t_order_$->{1..2} # 指定t_order表的数据分布情况，配置数据节点
#          key-generator: # 指定t_order表的主键生成策略为snowflake
#            column: order_id
#            type: SNOWFLAKE
#          table-strategy: # 指定 t_order 表的分片策略，分片策略包括分片键和分片算法
#            inline:
#              sharding-column: order_id
#              algorithm-expression: t_order_$->{order_id % 2 + 1}
#        # profile 表垂直分库直接分配到另外一个库，并且不需要水平分表
#        profile:
#          actual-data-nodes: ds1.profile_1 # 指定profile_1表的数据分布情况，配置数据节点
#          key-generator: # 指定t_order表的主键生成策略为snowflake
#            column: profile_id
#            type: SNOWFLAKE
    props: # 打开sql输出日志
      sql:
        show: true

# 日志
logging:
  #  level: info
  org:
    springframework:
      web: info
  com:
    guo:
      sharding: debug
  druid:
    sql: debug

# mybaitis配置
mybatis:
  configuration:
    map-underscore-to-camel-case: true
